#-------------------------------------------------------------------
#-------------------------------------------------------------------
# This is the default mkgmap style file for converting OSM ways
# into Garmin lines.
#-------------------------------------------------------------------
#-------------------------------------------------------------------

# Any line prefaced with # is a comment and will not be applied.
# Each line is a rule, of the generalised format:
#  OSM_tag(s)_to_match  [Garmin_type_code resolution]
# See http://wiki.openstreetmap.org/wiki/Mkgmap/help/style_rules
# and http://wiki.openstreetmap.org/wiki/Mkgmap/help/Custom_styles
# for more information.


#===============================================================
# NB: level 0 corresponds to the most zoomed in view of the map
#     and levels 1, 2, etc are progressively zoomed out views
#===============================================================


#---------------------------------------------
# OSM ways tagged as bridges (see also below)
#---------------------------------------------
#
# NB: we include 'continue' to allow footpaths over bridges to be drawn in from the OSM
#     data but then stop that before we get to other types of way which will be drawn
#     in from the Vectormap data
#
bridge=*	[0x010f13 level 0-1 continue]


#-------------------
# OSM rights of way
#-------------------
#
# NB: the tagging of rights of way in OSM can be a bit inconsistent so
# the following tests try to sweep up all the different cases

# Show all private ways as 'restriction' lines (grey dotted)
access=private			[0x010500 level 0-2]

# Bridleways (NB: not all bridleways permit horses)
(highway=bridleway | designation=public_bridleway | designation=byway_open_to_all_traffic) & !(horse=no)	[0x010f11 level 0-2]
horse=* & horse!=no		[0x010f11 level 0-2]

# Cycleways
highway=cycleway		[0x010108 level 0-2]
(designation=public_bridleway | designation=public_byway | designation=restricted_byway | designation=byway_open_to_all_traffic) & !(bicycle=no)	[0x010108 level 0-2]
(designation=public_bridleway | designation=public_byway | designation=restricted_byway | designation=byway_open_to_all_traffic) & !(cycle=no)		[0x010108 level 0-2]
bicycle=* & !(bicycle=no)	[0x010108 level 0-2]
cycle=* & !(cycle=no)		[0x010108 level 0-2]

# Footpaths
highway=footway	| highway=path	[0x16 level 0-2]
(designation=restricted_byway | designation=public_byway | designation=public_bridleway | designation=public_footpath | designation=byway_open_to_all_traffic) & !(foot=no)	[0x16 level 0-2]
foot=* & !(foot=no)		[0x16 level 0-2]

# Tracks
highway=track			[0x010f12 level 0-2]


#---------------------------------------------------------------------
# cancel further processing of OSM ways tagged as bridges (see above)
#---------------------------------------------------------------------
bridge=* { deletealltags }


#--------------------
# vectormap Railways
#--------------------

# railway tunnel
railway=* & tunnel=yes		[0x010107 level 0-3]

# treat abandoned railways and platforms like 'highway=track'
railway=abandoned | railway=platform	[0x010f12 level 0-3]

# railway multi-track
railway=* & !(tracks=1)		[0x14 level 0-3]

# railway single track
railway=* & tracks=1		[0x010f0b level 0-3]

# misc types of railway (narrow gauge etc.)
railway=*			[0x010f0c level 0-3]



aeroway=runway [0x27 resolution 20]
aeroway=taxiway [0x27 resolution 24]

# Assign the street name for house number search
highway=* & name=* { set mkgmap:street='${name}' }

# Mark highways with the toll flag
highway=* & (toll=yes|toll=true) { set mkgmap:toll=yes }

# Hide proposed ways
highway=proposed {delete highway;delete junction}

# Hide unaccessible tunnels
#highway=* & tunnel=yes & (access=private|access=no) & foot!=* & bicycle!=* {delete highway;delete junction}

# Disable dead-end-checks for unaccessible oneways
highway=* & oneway=yes & (access=private|access=no)
{add mkgmap:dead-end-check=false}

# Validation-like checks (uncomment to enable)
#highway=motorway_link & oneway!=yes & oneway!=no { echo "motorway_link lacks oneway" }
highway=motorway|highway=motorway_link { add oneway=yes }

# Set highway names to include the reference if there is one
highway=motorway { name '${ref|highway-symbol:hbox} ${name}' | '${ref|highway-symbol:hbox}' | '${name}' }

(highway=motorway_link | highway=trunk_link) & mkgmap:exit_hint=true & mkgmap:dest_hint=true
  { name '${destination:ref|subst: =>} ${destination|subst:;=> |subst:/=> }' | 
         '${ref|subst: =>} ${destination|subst:;=> |subst:/=> }' | 
         '${destination|subst:;=> |subst:/=> }' |
         'Exit ${mkgmap:exit_hint_ref} ${mkgmap:exit_hint_name}' | 
         'Exit ${mkgmap:exit_hint_ref} ${mkgmap:exit_hint_exit_to}' | 
         'Exit ${mkgmap:exit_hint_exit_to}' |
         'Exit ${mkgmap:exit_hint_name}' |
         'Exit ${mkgmap:exit_hint_ref}'
       }

(highway=motorway_link | highway=trunk_link) & mkgmap:exit_hint!=* & mkgmap:dest_hint=true
  { name '${destination:ref|subst: =>} ${destination|subst:;=> |subst:/=> }' |
         '${ref|subst: =>} ${destination|subst:;=> |subst:/=> }' | 
         '${destination|subst:;=> |subst:/=> }'
       }

(highway=motorway_link | highway=trunk_link) & mkgmap:exit_hint=true & mkgmap:dest_hint!=*
  { name 'Exit ${mkgmap:exit_hint_ref} ${mkgmap:exit_hint_name}' | 
         'Exit ${mkgmap:exit_hint_ref} ${mkgmap:exit_hint_exit_to}' | 
         'Exit ${mkgmap:exit_hint_exit_to}' |
         'Exit ${mkgmap:exit_hint_name}' |
         'Exit ${mkgmap:exit_hint_ref}'
       }
              
highway=trunk {name '${ref|highway-symbol:hbox} ${name}' | '${ref|highway-symbol:hbox}' | '${name}'; addlabel '${name} (${ref})' }
highway=primary {name '${ref|highway-symbol:box} ${name}' | '${ref|highway-symbol:box}' | '${name}'; addlabel '${name} (${ref})' }
highway=secondary | highway=tertiary {name '${ref|highway-symbol:oval} ${name}' | '${ref|highway-symbol:oval}' | '${name}'; addlabel '${name} (${ref})' }
highway=* {name '${name}' | '${ref}' }

# Flag unpaved roads.
highway=*
& (surface=cobblestone | surface=compacted | surface=dirt |
   surface=earth | surface=grass | surface=grass_paver |
   surface=gravel | surface=grit | surface=ground | surface=mud |
   surface=pebblestone | surface=sand | surface=unpaved |
   mtb:scale=* |
   tracktype ~ 'grade[2-6]' |
   smoothness ~ '.*(bad|horrible|impassable)' |
   sac_scale ~ '.*(mountain|alpine)_hiking' |
   sport=via_ferrata)
{ add mkgmap:unpaved=1 }
(highway=bridleway | highway=path | highway=track | highway=unsurfaced)
& surface!=* & tracktype!=* & smoothness!=* & sac_scale!=*
{ add mkgmap:unpaved=1 }

# Convert generic path to most specific
highway=footway & snowplowing!=no
& (bicycle=yes|bicycle=designated|bicycle=permissive|bicycle=official)
{set highway=cycleway; set bicycle=yes}
highway=path & snowplowing!=no
& (bicycle=designated|bicycle=permissive|bicycle=official)
{set highway=cycleway; set bicycle=yes}
highway=path & (horse=designated|horse=permissive|horse=official)
{set highway=bridleway; set horse=yes}

leisure=track & area!=yes
{add highway=footway; name '${name} (${sport})' | '${name}'}
(man_made=pier | man_made=piste:halfpipe) & area!=yes
{add highway=footway; name '${ref} ${name}' | '${ref}' | '${name}' }

# Roundabouts
junction=roundabout & (highway=trunk | highway=trunk_link) [0x0c road_class=3 road_speed=2 resolution 18]
junction=roundabout & (highway=primary | highway=primary_link) [0x0c road_class=3 road_speed=2 resolution 19]
junction=roundabout & (highway=secondary | highway=secondary_link) [0x0c road_class=2 road_speed=2 resolution 20]
junction=roundabout & (highway=tertiary | highway=tertiary_link) [0x0c road_class=1 road_speed=1 resolution 21]
junction=roundabout & highway=unclassified [0x0c road_class=1 road_speed=1 resolution 21]
junction=roundabout [0x0c road_class=0 road_speed=1 resolution 22]

# Ways that may or may not be useable

# Treat ways under construction almost as highway=path
highway=construction { add mkgmap:dead-end-check = false; }
[0x16 road_class=0 road_speed=0 resolution 23]

# Lower the road speed of ways under some construction.
highway=* & construction=* & maxspeed!=* { add mkgmap:road-speed = '-1' }
# Lower the road speed of disused ways.
highway=* & disused=yes & maxspeed!=* { add mkgmap:road-speed = '-2' }

# Ways sorted roughly by descending order of class
highway=motorway & network=e-road [0x01 resolution 14-14 continue]


#-----------------
# Vectormap Roads
#-----------------

# motorway dual carriageway
highway=motorway { set mkgmap:label:1 = '${dftnumber|highway-symbol:"hbox:4"} motorway ${dftnumber}' | 'motorway' }
highway=motorway	[0x01	  level 0-0 continue]
highway=motorway	[0x010e00 level 1-1 continue]
highway=motorway	[0x010e01 level 2-2 continue]
highway=motorway	[0x010e02 level 3-3 continue]
highway=motorway	[0x010e03 level 4-4]

# motorway single carriageway
highway=motorway_link	[0x0b     level 0-0 continue]
highway=motorway_link	[0x010e04 level 1-1 continue]
highway=motorway_link	[0x010e05 level 2-2 continue]
highway=motorway_link	[0x010e06 level 3-3 continue]
highway=motorway_link	[0x010e07 level 1-1]

# trunk dual carriageway
highway=trunk { set mkgmap:label:1 = '${dftnumber|highway-symbol:"box:5"} ${name}' | '${name}' | 'trunk road' }
highway=trunk		[0x02     level 0-0 continue]
highway=trunk		[0x010e08 level 1-1 continue]
highway=trunk		[0x010e09 level 2-2 continue]
highway=trunk		[0x010e0a level 3-3 continue]
highway=trunk		[0x010e0b level 4-4]

# trunk single carriageway
highway=trunk { set mkgmap:label:1 = '${dftnumber|highway-symbol:"box:5"} ${name}' | '${name}' | 'trunk road' }
highway=trunk_link	[0x0d     level 0-0 continue]
highway=trunk_link	[0x010e0c level 1-1 continue]
highway=trunk_link	[0x010e0d level 2-2 continue]
highway=trunk_link	[0x010e0e level 3-3 continue]
highway=trunk_link	[0x010e0f level 4-4]

# 'A' road dual carriageway
highway=trunk { set mkgmap:label:1 = '${dftnumber|highway-symbol:"box:5"} ${name}' | '${name}' | 'A road' }
highway=primary		[0x03     level 0-0 continue]
highway=primary		[0x010e10 level 1-1 continue]
highway=primary		[0x010e11 level 2-2 continue]
highway=primary		[0x010e12 level 3-3 continue]
highway=primary		[0x010e13 level 4-4]

# 'A' road
highway=trunk { set mkgmap:label:1 = '${dftnumber|highway-symbol:"box:5"} ${name}' | '${name}' | 'A road' }
highway=primary_link	[0x0e     level 0-0 continue]
highway=primary_link	[0x010e14 level 1-1 continue]
highway=primary_link	[0x010e15 level 2-2 continue]
highway=primary_link	[0x010e16 level 3-3 continue]
highway=primary_link	[0x010e17 level 4-4]

# 'B' road dual carriageway
highway=trunk { set mkgmap:label:1 = '${dftnumber|highway-symbol:"box:5"} ${name}' | '${name}' | 'B road' }
highway=secondary	[0x04     level 0-0 continue]
highway=secondary	[0x010e18 level 1-1 continue]
highway=secondary	[0x010e19 level 2-2 continue]
highway=secondary	[0x010e1a level 3-3]

# 'B' road
highway=trunk { set mkgmap:label:1 = '${dftnumber|highway-symbol:"box:5"} ${name}' | '${name}' | 'B road' }
highway=secondary_link	[0x0f     level 0-0 continue]
highway=secondary_link	[0x010e1b level 1-1 continue]
highway=secondary_link	[0x010e1c level 2-2 continue]
highway=secondary_link	[0x010e1d level 3-3]

# minor road dual carriageway
highway=tertiary	[0x05     level 0-0 continue]
highway=tertiary	[0x010e1e level 1-1 continue]
highway=tertiary	[0x010e1f level 2-2 continue]
highway=tertiary	[0x010f00 level 3-3]

# minor road
highway=tertiary_link	[0x10     level 0-0 continue]
highway=tertiary_link	[0x010f01 level 1-1 continue]
highway=tertiary_link	[0x010f02 level 2-2 continue]
highway=tertiary_link	[0x010f03 level 3-3]

# local street
highway=residential	[0x06     level 0-0 continue]
highway=residential	[0x010f04 level 1-1 continue]
highway=residential	[0x010f05 level 2-2]

# private road publically accessible
highway=living_street	[0x07     level 0-0 continue]
highway=living_street	[0x010f06 level 1-1 continue]
highway=living_street	[0x010f07 level 2-2]

# pedestrianised street
highway=pedestrian & area!=yes	[0x08     level 0-0 continue]
highway=pedestrian & area!=yes	[0x010f08 level 1-1 continue]
highway=pedestrian & area!=yes	[0x010f09 level 2-2 continue]
highway=pedestrian & area!=yes	[0x010f0a level 3-3]

# road tunnel
highway=road & tunnel=yes	[0x010f0d level 0-0 continue]
highway=road & tunnel=yes	[0x010f0e level 1-1 continue]
highway=road & tunnel=yes	[0x010f0f level 2-2 continue]
highway=road & tunnel=yes	[0x010f10 level 3-3 continue]
highway=road & tunnel=yes	[0x010e03 level 4-4]

# service road
highway=service		[0x07	level 2]

# catch all
highway=* & highway!=proposed & motorroad=yes [0x010103 level 4]


# Some countries allow, others disallow bicycling on pedestrian streets.
# To allow bicycling, add 'add bicycle=yes'
#highway=pedestrian & area!=yes [0x16 road_class=0 road_speed=0 resolution 22]
#highway=living_street [0x06 road_class=0 road_speed=1 resolution 22]
#highway=residential [0x06 road_class=0 road_speed=2 resolution 22 continue


highway=bridleway [0x07 road_class=0 road_speed=0 resolution 23]
highway=byway [0x16 road_class=0 road_speed=0 resolution 23]

highway=service & service=parking_aisle [0x07 road_class=0 road_speed=1 resolution 24]
highway=service & (service=alley|service=driveway) [0x07 road_class=0 road_speed=0 resolution 23]
highway=service [0x07 road_class=0 road_speed=2 resolution 22]

highway=unsurfaced [0x010f12 road_class=0 road_speed=1 level 2]

highway=road { add mkgmap:dead-end-check = false} [0x06 road_class=0 road_speed=1 resolution 22]

# Mop up any unrecognised highway types
highway=* & highway!=proposed & area!=yes [0x07 road_class=0 road_speed=0 resolution 23] 

# coastline and tidal zone
natural=coastline & tideline=high [0x15 level 4]
natural=coastline & tideline=low [0x1a level 3]
natural=coastline [0x15 level 4]

# electicity line and pylons
power=line [0x29 resolution 21]




(man_made=cable|(man_made=* & man_made ~ '.*pipe.*')) & area!=yes &
tunnel!=yes & location != underground
{name '${name} (${operator})' | '${name}' | '${operator}' }
[0x28 resolution 23]

# The following boundary styles are after the highway rules because ways
# are frequently tagged with both and we want the highway to take priority.
boundary=administrative { name '${mkgmap:boundary_name}' }
boundary=administrative & admin_level<3 [0x1e resolution 12]
boundary=administrative & admin_level<5 [0x1d resolution 19]
boundary=administrative & admin_level<7 [0x1c resolution 21]
boundary=administrative & admin_level<9 [0x1c resolution 22]
boundary=administrative [0x1c resolution 22]
boundary=national [0x1e resolution 17]
boundary=political [0x1c resolution 19]

# border for buildings
building=yes [0x010600 level 2 continue]

# border for woodlands
natural=wood [0x010601 level 2 continue]

# border for glasshouses
building=greenhouse | building=glasshouse [0x010600 level 2 continue]

include 'inc/water_lines';
include 'inc/contour_lines';

<finalize>
# The finalizer section is executed for each element when a rule with an element type matches

include 'inc/address';
# calculate the road speed based on maxspeed tag
include 'inc/roadspeed'; 
# calculate the access rules
include 'inc/access';

#limit artificial cycleways to to resolution 24
mkgmap:synthesised=yes & mkgmap:bicycle=yes { set mkgmap:highest-resolution-only = true }

name=* { name '${name}' }

highway=* & ref=* { addlabel '${ref}' }
highway=* & int_ref=* { addlabel '${int_ref}' }
highway=* & nat_ref=* { addlabel '${nat_ref}' }
highway=* & reg_ref=* { addlabel '${reg_ref}' }
